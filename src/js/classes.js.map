{"version":3,"file":"classes.js","sourceRoot":"","sources":["classes.ts"],"names":[],"mappings":"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","sourcesContent":["\n//-------classes-------\nclass Line {\n\n    static all_lines: Line[] = [];\n    mId: string;\n    mDefLineHeight: number;\n    mCheckInit: boolean;\n    m$ChordSizer: JQuery;\n    mTextarea: JQuery;\n    mRowCount: number;\n\n    constructor() {\n        this.mId = getNewId();\n        this.mDefLineHeight = 0;\n        this.mCheckInit = false; //see if the line has been initialized\n    }\n    _init() {\n        this.mDefLineHeight = this.get$Textbox().get(0).scrollHeight;\n        this.m$ChordSizer = $(this._$this().find('.line_chords_sizer')[0]);\n        this.mCheckInit = true;\n        var self = this;\n        this._$this().bind(\"contextmenu\", function () {\n            //console.log(\"here2\");\n            self._handleRightClick(event);\n        });\n    }\n\n    _$this() {\n        return $('#' + this.mId);\n    }\n\n    _htmlLine(string: string) {\n        return \"<div id=\\\"\" + this.mId + \"\\\" class=\\\"line_div\\\">\" +\n            \"<div class='line_chords'></div>\" +\n            \"<div class='line_chords_sizer invisible'>TEST</div>\" +\n            \"<div class='line_text_container'>\" +\n            this._htmlTextBox(string) +\n            \"</div>\" +\n            \"</div>\";\n    }\n\n    _htmlTextBox(x: string) {\n        if (typeof x == \"undefined\") {\n          x = \"\";\n        }\n        return \"<div class=\\\"line_text_box line_text_style\\\" onkeydown='onKeyDown(event, this)' onkeyup='onKeyUp(event, this)' contenteditable='true'>\" + x + \"</div>\";\n    }\n\n    get$Textbox() {\n        if (this.mTextarea == null) {\n            this.mTextarea = this._$this().find('.line_text_box');\n        }\n        return $(this.mTextarea);\n    }\n\n    /*\n    _pushRow() {\n        var $this = this._$this();\n        $this.append(this._htmlTextBox());\n        var textareas = $this.find('.line_textarea');\n        var $ogTextarea = $(textareas[textareas.length - 2]);\n        var $newTextarea = $(textareas[textareas.length - 1]);\n        $newTextarea.addClass('line_textarea_extra_row');\n        var str = $ogTextarea.val();\n        var lastSpace = str.lastIndexOf(\" \");\n        $ogTextarea.val(str.substring(0, lastSpace));\n        $newTextarea.val(str.substring(lastSpace + 1, str.length));\n        $newTextarea.focus();\n        this.mRowCount++;\n    }\n\n    _popRow() {\n        var $this = this._$this();\n        var textareas = $this.find('.line_textarea');\n        textareas[textareas.length - 2].focus();\n        textareas[textareas.length - 1].remove();\n        this.mRowCount--;\n    }\n    */\n\n    _handleRightClick(event: Event) {\n        console.log(\"you right-clicked. good job\");\n        //new ChordMenu(event, this);\n    }\n\n    appendLine($container: JQuery, string: string) {\n        Line.all_lines.push(this);\n        $container.append(this._htmlLine(string));\n        this._init();\n    }\n\n    afterLine($container: JQuery) {\n        Line.all_lines.push(this);\n        $container.after(this._htmlLine(\"\"));\n        this._init();\n    }\n\n    removeLine() {\n        this._$this().remove();\n        Line.all_lines.removeObj(this);\n    }\n\n    onKeyUp(event: KeyboardEvent, $textarea: JQuery) {\n        var str: string = $textarea.val() as string;\n        var key = event.key;\n        //TODO ignore non-letter keypresses\n        //if space is the only char, delete it\n        if (str.length == 1 && str[0] == \" \") {\n            $textarea.val(\"\");\n        }\n        //ignore double spaces\n        if (key == \" \" && str[str.length - 2] == \" \") {\n            $textarea.val(str.slice(0, str.length - 1));\n        }\n        //  I'm disabling this cause it's current implementation is bad\n        //if($textarea.get(0).scrollHeight > this.mDefLineHeight) {\n        //    this._pushRow();\n        //} else if(this.mRowCount > 1 && $textarea.val() == \"\") {\n        //    this._popRow();\n        //}\n    }\n\n    static get_line_from_$obj($obj: JQuery) {\n        var findId = getParentLineDiv($obj).attr('id');\n        var solution: Line = null;\n        Line.all_lines.forEach(function (obj, index) {\n            if (findId == obj.mId) {\n                solution = obj;\n                return false;\n            }\n        });\n        if (solution == null) {\n            throw new Error(\"get_line_from_$obj did \" +\n                \"not find anything; obj was \" + $obj);\n        }\n        else {\n            return solution;\n        }\n    }\n}\n\nclass ChordMenu  {\n    lineObj: Line;\n    menu: HTMLElement;\n    static oldChordMenu: ChordMenu;\n\n    constructor(event: Event, lineObject: Line) {\n        this.lineObj = lineObject;\n        this.menu = document.querySelector('#chord-menu');\n\n        ChordMenu.destroyIfExists();\n        ChordMenu.oldChordMenu = this;\n\n        event.preventDefault();\n        this.menu.classList.add(\"menu_chords__on\");\n\n        var textbox = this.lineObj.get$Textbox();\n        var selectionStart = textbox.prop(\"selectionStart\");\n        var selectionEnd = textbox.prop(\"selectionEnd\");\n        //var text = this.mLineClone.text();\n        //this.lineObj.mLineClone.text(\n        //    text.slice(0,selectionStart) + \"<span>\" +\n        //    text.slice(selectionStart, selectionEnd) + \"</span>\" +\n        //    text.slice(selectionEnd));\n    }\n\n    destroy() {\n        this.menu.classList.remove(\"menu_chords__on\");\n        ChordMenu.oldChordMenu = null;\n    }\n\n    static destroyIfExists() {\n        if(ChordMenu.oldChordMenu != null) {\n            ChordMenu.oldChordMenu.destroy();\n        }\n    }\n}\n\nvar ID_GEN = 0;\nfunction getNewId() {\n    return \"autogen\" + ID_GEN++;\n}\n\n/*\nvar Line = (function () {\n    function Line() {\n        this.mId = getNewId();\n        this.mDefLineHeight = 0;\n        this.mCheckInit = false; //see if the line has been initialized\n    }\n    //Called after append or after\n    Line.prototype._init = function () {\n        this.mDefLineHeight = this.get$Textbox().get(0).scrollHeight;\n        this.m$ChordSizer = $(this._$this().find('.line_chords_sizer')[0]);\n        this.mCheckInit = true;\n        var self = this;\n        this._$this().bind(\"contextmenu\", function () {\n            //console.log(\"here2\");\n            self._handleRightClick(event);\n        });\n    };\n    Line.prototype._$this = function () {\n        return $('#' + this.mId);\n    };\n    Line.prototype._htmlLine = function (string) {\n        return \"<div id=\\\"\" + this.mId + \"\\\" class=\\\"line_div\\\">\" +\n            \"<div class='line_chords'></div>\" +\n            \"<div class='line_chords_sizer invisible'>TEST</div>\" +\n            \"<div class='line_text_container'>\" +\n            this._htmlTextbox(string) +\n            \"</div>\" +\n            \"</div>\";\n    };\n    Line.prototype._htmlTextbox = function (string) {\n        if (typeof string == \"undefined\")\n            string = \"\";\n        return \"<div class=\\\"line_text_box line_text_style\\\" onkeydown='onKeyDown(event, this)' onkeyup='onKeyUp(event, this)' contenteditable='true'>\" + string + \"</div>\";\n    };\n    Line.prototype.get$Textbox = function () {\n        if (this.mTextarea == null) {\n            this.mTextarea = this._$this().find('.line_text_box');\n        }\n        return $(this.mTextarea);\n    };\n    Line.prototype._pushRow = function () {\n        var $this = this._$this();\n        $this.append(this._htmlTextbox());\n        var textareas = $this.find('.line_textarea');\n        var $ogTextarea = $(textareas[textareas.length - 2]);\n        var $newTextarea = $(textareas[textareas.length - 1]);\n        $newTextarea.addClass('line_textarea_extra_row');\n        var string = $ogTextarea.val();\n        var lastSpace = string.lastIndexOf(\" \");\n        $ogTextarea.val(string.substring(0, lastSpace));\n        $newTextarea.val(string.substring(lastSpace + 1, string.length));\n        $newTextarea.focus();\n        this.mRowCount++;\n    };\n    Line.prototype._popRow = function () {\n        var $this = this._$this();\n        var textareas = $this.find('.line_textarea');\n        textareas[textareas.length - 2].focus();\n        textareas[textareas.length - 1].remove();\n        this.mRowCount--;\n    };\n    Line.prototype._handleRightClick = function (event) {\n        new ChordMenu(event, this);\n    };\n    Line.prototype.appendLine = function ($container, string) {\n        this.constructor.all_lines.push(this);\n        $container.append(this._htmlLine(string));\n        this._init();\n    };\n    Line.prototype.afterLine = function ($container) {\n        this.constructor.all_lines.push(this);\n        $container.after(this._htmlLine(\"\"));\n        this._init();\n    };\n    Line.prototype.removeLine = function () {\n        this._$this().remove();\n        Line.all_lines.removeObj(this);\n    };\n    Line.prototype.onKeyUp = function (event, $textarea) {\n        var string = $textarea.val();\n        var key = event.key;\n        //TODO ignore non-letter keypresses\n        //if space is the only char, delete it\n        if (string.length == 1 && string[0] == \" \") {\n            $textarea.val(\"\");\n        }\n        //ignore double spaces\n        if (key == \" \" && string[string.length - 2] == \" \") {\n            $textarea.val(string.slice(0, string.length - 1));\n        }\n        //  I'm disabling this cause it's current implementation is bad\n        //if($textarea.get(0).scrollHeight > this.mDefLineHeight) {\n        //    this._pushRow();\n        //} else if(this.mRowCount > 1 && $textarea.val() == \"\") {\n        //    this._popRow();\n        //}\n    };\n    return Line;\n}());\nLine.all_lines = [];\nLine.get_line_from_$obj = function ($obj) {\n    findId = getParentLineDiv($obj).attr('id');\n    solution = -1;\n    Line.all_lines.forEach(function (obj, index) {\n        if (findId == obj.mId) {\n            solution = obj;\n            return false;\n        }\n    });\n    if (solution == -1) {\n        throw new Error(\"get_line_from_$obj did \" +\n            \"not find anything; obj was \" + $obj);\n    }\n    else {\n        return solution;\n    }\n};\n*/\n\n/*\nvar ChordMenu = (function () {\n    function ChordMenu(event, lineObj) {\n        this.lineObj = lineObj;\n        this.menu = document.querySelector('#chord-menu');\n        if (this.constructor.oldChordMenu != null) {\n            this.constructor.oldChordMenu.destroy();\n        }\n        this.constructor.oldChordMenu = this;\n        event.preventDefault();\n        this.menu.classList.add(\"menu_chords__on\");\n        var textbox = this.lineObj.get$Textbox();\n        var selectionStart = textbox.prop(\"selectionStart\");\n        var selectionEnd = textbox.prop(\"selectionEnd\");\n        //var text = this.mLineClone.text();\n        //this.lineObj.mLineClone.text(\n        //    text.slice(0,selectionStart) + \"<span>\" +\n        //    text.slice(selectionStart, selectionEnd) + \"</span>\" +\n        //    text.slice(selectionEnd));\n    }\n    ChordMenu.prototype.destroy = function () {\n        this.menu.classList.remove(\"menu_chords__on\");\n        this.constructor.oldChordMenu = null;\n    };\n    return ChordMenu;\n}());\nChordMenu.oldChordMenu = null;\nChordMenu.destroyIfExists = function () {\n    if (ChordMenu.oldChordMenu != null) {\n        ChordMenu.oldChordMenu.destroy();\n    }\n};\n*/\n\n\n"]}